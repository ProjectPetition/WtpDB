
import requests, peewee,json, unicodedata
class Project_scrape:
  
   
 


  def loading_contents(self, f):
   fil = open(f)
   b = json.load(fil)
   return int(b['metadata']['requestInfo']['query']['limit'])
 
  def issues_extract(self, id):
    s = requests.Session() 
    r = s.get('https://api.whitehouse.gov/v1/petitions/'+str(id)+'.json')
    r.encoding = 'ISO-8859-1'
    dictlist=[]
    y = unicodedata.normalize('NFKD', r.text).encode('ASCII', 'ignore')
    f= open('issues.txt', 'w')
    f.write(y)
    f.close()
    fil = open('issues.txt')
    try:
      b = json.load(fil)
      issueid=""
      issuename=""
      
      for i in range(int(b['metadata']['resultset']['limit'])):
        
        for j in range(len(b['results'][i]['issues'])):
            dict1 = {
             'id' : int(b['results'][i]['issues'][j]['id']),
             'name' : str(b['results'][i]['issues'][j]['name'])
            }
            dictlist.append(dict1)
    except:
        print 'No issues extracted for '+str(id)
    
    print "issues extracted"
    
    return dictlist

  def petition_extract(self):
     s = requests.Session()
     r = s.get('https://api.whitehouse.gov/v1/petitions.json?limit=1000&offset=0')
     r.encoding = 'ISO-8859-1'
     y = unicodedata.normalize('NFKD', r.text).encode('ASCII', 'ignore')
     f= open('petitions.txt', 'w')
     f.write(y)
     f.close()
     print 'petitions Fetched'
     f = open('petitions.txt', 'r')
     b = json.load(f)
     dictlist = []
     
     for i in range(Project_scrape.loading_contents(self,'petitions.txt')):
         
         if (str(b['results'][i]['type']) == 'petition'):
             dict1={
                 "id" : str(b['results'][i]['id']),
                 "type" : str(b['results'][i]['type']),
                 "title": str(b['results'][i]['title']),
                 "body" : str(b['results'][i]['body'].encode('utf8', 'ignore')),
                 "signature_threshold" : int(b['results'][i]['signatureThreshold']),
                 "signature_count" : int(b['results'][i]['signatureCount']),
                 "signatures_needed" : int(b['results'][i]['signaturesNeeded']),
                 "url" : str((b['results'][i]['url']).encode('utf8', 'ignore')),
                 "deadline" : int(b['results'][i]['deadline']),
                 "status" : str(b['results'][i]['status']),
                 "created" : int(b['results'][i]['created'])
                        
             }
           

             dictlist.append(dict1)
     
     print "petitions extracted"
    
     return dictlist
    
  def response_extract(self, id):
    s = requests.Session()
    dict1 = {}
    r = s.get('https://api.whitehouse.gov/v1/petitions/'+str(id)+'.json')
    r.encoding = 'ISO-8859-1'
    y = unicodedata.normalize('NFKD', r.text).encode('ASCII', 'ignore')
    f= open('response.txt', 'w')
    f.write(y)
    f.close()
    fil = open('response.txt')
    try:
     b = json.load(fil)
     if (b['results'][0]['response'] is None):
      print 'response null'
    
     else:
      dict1 = {
          "url" : str(b['results'][0]['response']['url']),
          "id" : str(b['results'][0]['response']['id']),
          "associationtime" : int(b['results'][0]['response']['associationTime'])
       }
    except:
        print 'no responses for'+str(id)
    
    
    print "responses extracted"
    return dict1
   
    

  def signatures_extract(self, id):
    s = requests.Session()
    r = s.get('https://api.whitehouse.gov/v1/petitions/'+str(id)+'/signatures.json?limit=1000&offset=0')
    r.encoding = 'ISO-8859-1'
    y = unicodedata.normalize('NFKD', r.text).encode('ASCII', 'ignore')
    f= open('signature.txt', 'w')
    f.write(y)
    dict1 ={}
    f.close()
    fil = open('signature.txt')
    b = json.load(fil)
    dictlist = []
    limitsigns = int(b['metadata']['resultset']['limit'])
        
    for i in range(limitsigns):
        try:
         dict1 = {
              "id" :str(b['results'][i]['name']+'_'+b['results'][i]['zip']+'_'+b['results'][i]['id']),
              "petition_id" : str(b['results'][i]['id']),
              "type" : str(b['results'][i]['type']),
              "name" : str(b['results'][i]['name']),
              "city" : str(b['results'][i]['city']),
              "state" : str(b['results'][i]['state']),
              "zip" : str(b['results'][i]['zip']),
              "created" : int(b['results'][i]['created'])
      
         }
         dictlist.append(dict1)
        except:
           print "caught exception" 
        print 'no signatures for '+str(id)
    print "signatures fetched"
    return dictlist

        
    


     
             
 

 

     

        
  
